{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Documentations / Guides","text":"<p>This is the official documentation and guides website of the system environment of Habits. All documentation is open-source and can be edited by the community (In case you have an enhancement or find a bug).</p> <p>Our habit tracking app is built with Next.js, a popular framework for building server-rendered React applications, and uses the utility-first CSS framework tailwind CSS for fast-loading and customizable designs. The frontend is written in TypeScript and we use Yarn as our package manager.</p> <p>At the core of our app is a custom habit tracking system built with React and Axios. This system allows users to create and manage their habits, and log their daily activities. The app also provides a variety of filters and views to help users track their progress and stay motivated.</p> <p>In addition to the habit tracking system, the app includes a journaling feature built with React and a custom backend API. This API is built using Spring Boot and Kotlin, and uses PostgreSQL as the database. This allows us to provide a powerful and scalable backend for our app, ensuring that it can handle a large number of users and data.</p> <p>In a nutshell, our habit tracking app is designed to be fast, responsive, and easy to use, providing users with the tools they need to build and maintain healthy habits.</p>"},{"location":"getting-started/","title":"Getting started","text":"<p>This chapter shows the various ways to run and deploy the application. After the application is running (locally), you can access it under the following URLs:</p> <ul> <li>Backend: http://localhost:8080</li> <li>Frontend: http://localhost:3000</li> <li>The REST-API: http://localhost:8080/api</li> </ul>"},{"location":"getting-started/#start-application-locally-for-development-preferred-way","title":"Start application locally for development (preferred way)","text":""},{"location":"getting-started/#backend","title":"Backend","text":"<p>The application uses Kotlin and Maven with Java Version 17.</p> <p>Start application by using Maven:</p> <pre><code>mvn clean install\n\n# using in-memory database\nmvn spring-boot:run -Dspring-boot.run.profiles=test\n\n# using locally deployed postgres as database (Requires a running database. See point Database below)\n# We mostly used this configuration during the development\nmvn spring-boot:run -Dspring-boot.run.profiles=local\n</code></pre>"},{"location":"getting-started/#frontend","title":"Frontend","text":"<p>Start the frontend with yarn:</p> <pre><code>yarn --cwd ui install\nyarn --cwd ui dev\n</code></pre>"},{"location":"getting-started/#database","title":"Database","text":"<p>We use PostgreSQL as our database. To get started run the database using Docker</p> <pre><code>docker-compose up -d postgresql\n</code></pre> <p>Be aware that you need to delete the database or drop the tables and let it be regenerated on startup by Flyway in case there were changes. If you are changing the structure of the database make sure to update or create a migration. You don't need to do that manually. In <code>application-local.properties</code> you can uncomment the lines regarding <code>javax.persistence.schema-generation</code>. This will create a file with the required SQL statements on startup to create the database.</p>"},{"location":"getting-started/#docker","title":"Docker","text":""},{"location":"getting-started/#use-pre-built-docker-images","title":"Use pre-built docker images","text":"<p>The easiest way to run the application is to use the pre-built docker-images from the GitHub registry. For this to work you need to log in to the GitHub registry first. See here for how to do this.</p> <p>To start the application locally, use following docker-compose file:</p> <pre><code>version: '3.9'\nservices:\n\nbackend:\nimage: ghcr.io/bfhmea4/habits-backend:latest\ncontainer_name: habits_backend\nports:\n- \"8080:8080\"\nnetworks:\n- net\nenvironment:\nSPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/habits\nSPRING_DATASOURCE_USERNAME: habits\nSPRING_DATASOURCE_PASSWORD: 'CHANGEME'\nSPRING_FLYWAY_URL: jdbc:postgresql://postgres:5432/habits\nSPRING_FLYWAY_USER: habits\nSPRING_FLYWAY_PASSWORD: 'CHANGEME'\nALLOWED_ORIGINS: http://127.0.0.1:3000,http://localhost:3000\nJWT_SIGNING_KEY: 'CHANGEME'\nJWT_TOKEN_VALIDITY: 604800\n# SPRING_PROFILES_ACTIVE: 'local' # Only for development\n\nfrontend:\nimage: ghcr.io/bfhmea4/habits-frontend:latest\ncontainer_name: habits_frontend\nports:\n- \"3000:3000\"\nnetworks:\n- net\nenvironment:\nENV_API_URL: 'http://127.0.0.1:8080'\n\npostgresql:\nimage: postgres:13-alpine\ncontainer_name: postgres\nnetworks:\n- net\nports:\n- '5432:5432'\nenvironment:\nPOSTGRES_DB: 'habits'\nPOSTGRES_USER: 'habits'\nPOSTGRES_PASSWORD: 'CHANGEME'\nvolumes:\n- db-data:/var/lib/postgresql/data\n\nvolumes:\ndb-data: {}\n\nnetworks:\nnet:\ndriver_opts:\ncom.docker.network.bridge.name: habits\n</code></pre> <p>Create and start container:</p> <pre><code>docker-compose up -d\n</code></pre> <p><code>SPRING_PROFILES_ACTIVE: 'local</code> should not be committed to the repository. It is only used for development. Uncomment it to use it.</p>"},{"location":"getting-started/#build-docker-container-manually","title":"Build docker container manually","text":"<p>You can build the docker container images manually with the included Dockerfiles under <code>./build/package/habits</code> and <code>./ui</code>. This step can be done automatically through a docker-compose file (see next chapter).</p> <pre><code>## build backend manually\ndocker build -f ./build/package/habits/Dockerfile . -t habits-backend:local\n\n## build frontend manually\ndocker build -f ./ui/Dockerfile . -t habits-frontend:local\n</code></pre>"},{"location":"getting-started/#build-docker-container-using-docker-compose","title":"Build docker container using docker-compose","text":"<p>Use following docker-compose file to build the docker images from the local source code and start the images after:</p> <pre><code>version: '3.9'\nservices:\n\nbackend:\nbuild:\ncontext: ./\ndockerfile: ./build/package/habits/Dockerfile\ncontainer_name: habits_backend\nports:\n- \"8080:8080\"\nnetworks:\n- net\nenvironment:\nSPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/habits\nSPRING_DATASOURCE_USERNAME: habits\nSPRING_DATASOURCE_PASSWORD: 'CHANGEME'\nSPRING_FLYWAY_URL: jdbc:postgresql://postgres:5432/habits\nSPRING_FLYWAY_USER: habits\nSPRING_FLYWAY_PASSWORD: 'CHANGEME'\nALLOWED_ORIGINS: http://127.0.0.1:3000,http://localhost:3000\nJWT_SIGNING_KEY: 'CHANGEME'\nJWT_TOKEN_VALIDITY: 604800\n# SPRING_PROFILES_ACTIVE: 'local' # Only for development\n\nfrontend:\nbuild: ./ui\ncontainer_name: habits_frontend\nports:\n- \"3000:3000\"\nnetworks:\n- net\nenvironment:\nENV_API_URL: 'http://127.0.0.1:8080'\n\npostgresql:\nimage: postgres:13-alpine\ncontainer_name: postgres\nnetworks:\n- net\nports:\n- '5432:5432'\nenvironment:\nPOSTGRES_DB: 'habits'\nPOSTGRES_USER: 'habits'\nPOSTGRES_PASSWORD: 'CHANGEME'\nvolumes:\n- db-data:/var/lib/postgresql/data\n\nvolumes:\ndb-data: {}\n\nnetworks:\nnet:\ndriver_opts:\ncom.docker.network.bridge.name: habits\n</code></pre> <p>Build and start container (this takes some time):</p> <pre><code>docker-compose up -d\n</code></pre> <p><code>SPRING_PROFILES_ACTIVE: 'local</code> should not be committed to the repository. It is only used for development. Uncomment it to use it.</p>"},{"location":"getting-started/#kubernetes","title":"Kubernetes","text":"<p>You can deploy Habits in your Kubernetes cluster, but you have to set all the env variables.</p>"},{"location":"getting-started/#environment-variables","title":"Environment Variables","text":"<p>You need to set the following environment:</p> <p>Backend</p> ENV Description <code>SPRING_DATASOURCE_URL</code> The JDBC-String of the database <code>SPRING_DATASOURCE_USERNAME</code> The database user <code>SPRING_DATASOURCE_PASSWORD</code> Password of the database user <code>SPRING_FLYWAY_URL</code> The JDBC-String of the database <code>SPRING_FLYWAY_USER</code> The flyway database user <code>SPRING_FLYWAY_PASSWORD</code> Password of the flyway database user <code>ALLOWED_ORIGINS</code> The allowed origins for CORS, e.g. <code>https://template.habits.io</code> <code>JWT_SIGNING_KEY</code> Key used to sign JWTs <code>JWT_TOKEN_VALIDITY</code> After how many seconds does a token expire <p>UI</p> ENV Description <code>ENV_API_URL</code> The URL of the API, e.g. <code>https://template.habits.io</code> (without trailing slash, must be accessible from the webclient)"},{"location":"getting-started/#postman","title":"Postman","text":"<p>Have a look at <code>src/main/resources/postman</code> for a Postman collection to test the API. Import it and run the login request. It will fetch a token and automatically set it for all other requests. Also make sure to import the environments to be able to run the requests against local or production.</p> <p></p>"},{"location":"requirements/","title":"Requirements","text":"<p>To find your way around the environment, you need certain know-how but also requirements for the client device so that you can connect at all.</p>"},{"location":"requirements/#know-how","title":"Know-How","text":"topic requirement Git Knows the most important Git commands GPG <code>signed commits</code> are enforced GitHub Knows the most important GitHub functions: - <code>GitHub Issues</code> - <code>GitHub Pull Requests</code> - <code>GitHub Workflows</code> - <code>GitHub Releases</code> - <code>GitHub Repositories</code> Docker The application is dockerized and stateless Knows the most important <code>docker</code> commands Kubernetes Knows the concept of Kubernetes Knows the most important <code>kubectl</code> commands"},{"location":"requirements/#setup-pre-commit","title":"Setup pre-commit","text":"<p>We use pre-commit to make several checks to identifying some issues on every commit.</p> <ol> <li> <p>install the pre-commit binary</p> </li> <li> <p>Setup pre-commit for this repository:</p> </li> </ol> <pre><code>// go to the root of the cloned git repository\n$ cd mea4_01_habits\n$ pre-commit install\npre-commit installed at .git/hooks/pre-commit\n</code></pre>"},{"location":"requirements/#technical-requirements","title":"Technical requirements","text":"<p>The following programs must be installed on your system:</p> <ul> <li>Java 17</li> <li>Maven</li> <li>Node version &gt;= 16</li> <li>yarn</li> <li>Docker</li> </ul>"},{"location":"architecture/backend/","title":"Backend","text":"<p>The backend is written with Kotlin Spring Boot and uses Flyway for database migrations. Over JDBC, the backend interacts with a PostgreSQL database. To secure the endpoints Spring Security in combination with JWTs is used.</p>"},{"location":"architecture/backend/#environments","title":"Environments","text":"<p>We have three different environments:</p> <ul> <li>Production</li> <li>Local</li> <li>Test</li> </ul>"},{"location":"architecture/backend/#production","title":"Production","text":"<p>Environment must be set when using this profile. More information can be found here: Getting Started</p>"},{"location":"architecture/backend/#local","title":"Local","text":"<p>Local is used for development. Flyway is enabled and the backend connects to a local PostgreSQL database.</p>"},{"location":"architecture/backend/#test","title":"Test","text":"<p>Test is used for testing and uses an H2 in-memory database.</p>"},{"location":"architecture/backend/#folder-structure","title":"Folder structure","text":"<p>There are three main folders:</p> <ul> <li><code>main</code> --&gt; Contains the source code</li> <li><code>feature-test</code> --&gt; Contains the integration tests</li> <li><code>test</code> --&gt; Contains the unit tests</li> </ul> <p>The source code is structured in the following way:</p> <ul> <li><code>config</code> --&gt; Security and CORS configuration</li> <li><code>controllers</code> --&gt; Spring controllers</li> <li><code>dtos</code> --&gt; Data transfer objects and builders</li> <li><code>entities</code> --&gt; JPA entities</li> <li><code>exceptions</code> --&gt; Custom exceptions</li> <li><code>filters</code> --&gt; Request filters (e.g. for authentication)</li> <li><code>respositories</code> --&gt; JPA repositories</li> <li><code>services</code> --&gt; Services to interact with the database</li> <li><code>testdata</code> --&gt; Database seed for local environment</li> <li><code>util</code> --&gt; Utility classes (e.g. for JWTs)</li> <li><code>HabitsApplication.kt</code> --&gt; Entry point of the application</li> </ul>"},{"location":"architecture/backend/#authentication-and-authorization","title":"Authentication and Authorization","text":""},{"location":"architecture/backend/#configuration","title":"Configuration","text":"<p>The current security configuration looks like this:</p> <pre><code>        http.\nauthorizeRequests { authorizeRequests -&gt;\nauthorizeRequests\n.antMatchers(\"/api/register\", \"/api/login\", \"/api/docs/**\", \"/api/swagger-ui/**\").permitAll()\n.anyRequest().authenticated()\n.and().sessionManagement()\n.sessionCreationPolicy(SessionCreationPolicy.STATELESS)\n}\n.csrf().disable()\n.cors(Customizer.withDefaults())\n.addFilterBefore(jwtRequestFilter, UsernamePasswordAuthenticationFilter::class.java)\n.exceptionHandling().authenticationEntryPoint(HttpStatusEntryPoint(HttpStatus.UNAUTHORIZED))\n</code></pre> <p>The endpoints <code>/api/register</code> and <code>/api/login</code> are public and can be accessed without authentication. Same for the Swagger UI and the OpenAPI documentation.</p> <p>All other endpoints are protected and require a valid JWT. That is ensured by the <code>JwtRequestFilter</code>.</p> <p>We also load to CORS configuration from the <code>WebConfiguration.kt</code> file.</p>"},{"location":"architecture/backend/#implementation","title":"Implementation","text":"<p>The <code>AuthController</code> and the <code>TokenProvider</code> are responsible to allow login/register and to generate the tokens.</p> <p>To do authorization the controller passes the current userId to the service.</p> <pre><code>    fun getAllHabits(@RequestHeader(value = \"Authorization\") token: String): ResponseEntity&lt;List&lt;Habit&gt;&gt; {\nval userId = tokenProvider.extractId(token)\nreturn ResponseEntity.ok().body(service.getAllHabits(userId))\n}\n</code></pre> <p>The queries then use the userId to filter the results. So if you are trying to access something that you are not allowed you will get a 404. For POST requests the userId is used to link the newly created entity to the user.</p>"},{"location":"architecture/backend/#testing","title":"Testing","text":""},{"location":"architecture/backend/#unit-tests","title":"Unit tests","text":"<p>We use <code>mockk</code> for mocking classes. Unit tests are used to test our custom/business logic. We don't want to test JPA or Spring functionality.</p> <p>Have a look in the <code>test</code> folder for examples.</p>"},{"location":"architecture/backend/#integration-tests","title":"Integration tests","text":"<p>In the <code>feature-test</code> folder we have integration tests. Those are run against the h2 in-memory database. We use actors that interact with the backend via REST calls. Those actors can and must also register a user and login to fetch a JWT token.</p> <p>Tests are grouped together via inner classes. And can also be run sequentially if needed via the <code>@TestMethodOrder(OrderAnnotation::class)</code> annotation.</p> <p>After every inner class the database is reset again to ensure a clean state.</p>"},{"location":"architecture/backend/#exception-handling","title":"Exception handling","text":"<p>We use custom exceptions and handle them in the <code>RestExceptionHandler.kt</code>. This means you can throw a custom exception anywhere in the code and the response creation will be handled automatically.</p>"},{"location":"architecture/backend/#openapi","title":"OpenAPI","text":"<p>The endpoint documentation can be found under <code>http://localhost:8080/api/swagger-ui</code> after starting the backend:</p> <p></p>"},{"location":"architecture/backend/#postman","title":"Postman","text":"<p>The Postman collection can be found under <code>src/main/resources/postman</code>:</p> <p></p>"},{"location":"architecture/backend/#classes","title":"Classes","text":"<p>The following classes are used for configuration and to handle Authentication:</p> <p></p> <p>Those are the entities used. They are all stored in the database:</p> <p></p> <p>All the controllers being used:</p> <p></p> <p>The services being used by the controllers:</p> <p></p> <p>To interact with the database the services use the following DAOs:</p> <p></p> <p>To handle incoming requests some custom DTOs are needed:</p> <p></p> <p>For the interaction testing we implement test actors that perform the REST operations:</p> <p></p>"},{"location":"architecture/frontend/","title":"Frontend","text":"<p>Our habit tracking web app is built with Next.js, a popular framework for building server-rendered React applications, and uses the utility-first CSS framework tailwind CSS to create fast-loading, responsive, and customizable designs. The frontend of our app is written in TypeScript, a typed superset of JavaScript, and we use Yarn as our package manager to ensure that our app has all the necessary components and resources it needs to run smoothly and efficiently.</p> <p>At the core of our app is a custom-built habit tracking system that allows users to log and track their daily activities and habits. This system is built using a combination of React components and Axios for managing application state. Users can create and manage their habits, and log their activities for each habit on a daily basis. The app also provides a variety of filters and views to help users track their progress and stay motivated.</p> <p>Additionally, the app includes a journaling feature that allows users to reflect on their progress and goals, and to share their thoughts and experiences with other users. This feature is built using a combination of React components and a custom-built backend API for managing user data and interactions.</p> <p>Overall, our habit tracking app is designed to be fast, responsive, and easy to use, providing users with the tools they need to build and maintain healthy habits.</p>"},{"location":"architecture/frontend/#structure","title":"Structure","text":"<p>The frontend architecture of our Next.js app is organized into a hierarchical structure of components. At the top level, we have a root component that acts as the entry point for the app and manages the overall layout and navigation.</p> <p>Within the root component, we have several smaller components that are responsible for specific tasks and features. For example, we have a header component that manages the app's header, a footer component that manages the app's footer, and a main content area component that manages the app's main content area.</p> <p>Each of these top-level components is made up of smaller, more focused components. For example, the header component might contain components for the app's logo, the navigation menu, and the user's profile. The main content area component might contain components for displaying the user's habits, logging daily activities, and viewing progress reports.</p> <p>This hierarchical structure allows us to easily reuse and modularize our code, making it easier to maintain and update the app over time. It also allows us to easily add new features and functionality by adding new components to the existing structure.</p>"},{"location":"architecture/frontend/#assets","title":"Assets","text":"<p>The <code>public</code> folder is where we store all of the assets that we want to make available to the client-side application. This typically includes things like images, logos, and other static files that are used by the app.</p> <p>The public folder is special because the contents of this folder are automatically served by the Next.js server without the need for any additional configuration. This means that any files placed in the public folder can be accessed by the app simply by referencing the file's path relative to the public folder.</p> <p>For example, if we have an image called logo.png in the public folder, we can reference it in our app by using the URL <code>/logo.png</code>. This will automatically serve the file from the public folder, allowing us to easily include it in our app.</p> <p>Overall, the public folder is a convenient way to manage and serve the assets that our app needs in order to function properly. It allows us to keep all of these assets organized in a single location and access them easily from anywhere in the app.</p>"},{"location":"architecture/frontend/#lib-and-utils","title":"Lib and Utils","text":"<p>The <code>lib</code> folder is where we can store any helper functions or utility code that is used by the app. This can include things like functions for parsing dates, formatting numbers, or performing other common tasks that are used throughout the app.</p> <p>The lib folder is a convenient place to store this type of code because it is automatically loaded by Next.js when the app starts. This means that we can easily import and use these helper functions from anywhere in the app without having to worry about manually importing them or dealing with complicated file paths.</p> <p>For example, if we have a helper function for parsing dates in the lib folder, we can use it in our app by importing it from the lib folder and calling it like any other function. This makes it easy to reuse and share common code between different parts of the app, reducing the need for duplicate code and making the app more maintainable.</p> <p>Overall, the lib folder is a useful tool for organizing and sharing helper functions and utility code in a Next.js app. It allows us to keep this type of code organized and easily accessible from anywhere in the app.</p>"},{"location":"architecture/frontend/#context","title":"Context","text":"<p>The <code>context</code> folder is where we can store React context objects that are used by the app. This can include things like an authentication context for managing user authentication, a localization context for managing internationalization, or other context objects that are used throughout the app.</p> <p>The context folder is a convenient place to store these context objects because it allows us to easily import and use them from anywhere in the app. This makes it easy to share data and state between different components in the app, without the need for prop drilling or other complex patterns.</p> <p>For example, if we have an authentication context in the context folder, we can use it in our app by importing it from the context folder and using the <code>useContext</code> hook to access the context data and functions in any component. This makes it easy to manage user authentication and access control throughout the app, without having to pass data and functions through multiple levels of components. We wrap the app in the context provider in the <code>_app.tsx</code> file, and then we can access the context data and functions from anywhere in the app.</p> <p>Overall, the context folder is a useful tool for organizing and sharing React context objects in a Next.js app. It allows us to keep these objects organized and easily accessible from anywhere in the app.</p>"},{"location":"architecture/frontend/#pages","title":"Pages","text":"<p>In a Next.js app, the <code>pages</code> directory is where we define the routes and components for our application. Each file in the pages directory represents a different route in the app, and the contents of the file define the component that will be rendered when that route is accessed.</p> <p>For example, if we have a file called login.tsx in the pages directory, this will define a route for the URL <code>/login</code>, and the contents of the file will define the component that will be rendered when this route is accessed.</p> <p>Next.js automatically generates the routing for our app based on the files in the pages directory, so we don't have to worry about configuring routing manually. This makes it easy to add new routes and components to our app, and to organize our app into logical, modular units.</p> <p>Overall, the pages directory is a central part of the Next.js framework, and is where we define the routes and components for our app. It allows us to easily add new routes and components to our app, and to organize our app into logical, modular units.</p>"},{"location":"architecture/overview/","title":"Architecture Overview","text":"<p>The application consists of three different parts:</p> <ul> <li>Next.js/React frontend</li> <li>Kotlin Spring Boot backend</li> <li>PostgreSQL database</li> </ul> <p>The frontend communicates with the backend via REST API calls. The backend communicates with the database via JDBC.</p> <p>The whole application is dockerized into three different containers. Those can then be deployed to a Kubernetes cluster.</p>"},{"location":"architecture/overview/#component-diagram","title":"Component Diagram","text":""},{"location":"architecture/overview/#database-diagram","title":"Database Diagram","text":""},{"location":"features/how-to-use/","title":"How to use","text":""},{"location":"features/how-to-use/#registration","title":"Registration","text":"<p>Registration is currently only possible through Postman. After you are logged in you have four different pages:</p> <p></p>"},{"location":"features/how-to-use/#home","title":"Home","text":"<p>On the Home screen you will find all your habits. There you can create new habits, edit existing ones, and delete habits. By each habit you will find a progress bar that shows you how many times you have logged a journal entry for that habit. You can also directly log a journal entry for a habit by clicking on the + button.</p>"},{"location":"features/how-to-use/#journal","title":"Journal","text":"<p>On the Journal screen you can log a journal entry for any habit. By logging a journal entry you will increase the progress bar for that habit. Also you can add a note, edit the note, delete the journal entry and filter them by habit.</p>"},{"location":"features/how-to-use/#profile","title":"Profile","text":"<p>On the Profile screen you can see your profile information and log out.</p>"},{"location":"features/how-to-use/#info","title":"Info","text":"<p>On the Info screen you can find information about this project.</p>"},{"location":"project/impediment-backlog/","title":"Impediment backlog","text":"Date Problem Description 20.10.22 Sprint length The sprint length of one week is too short for us (Developer). Our proposal is to change to a two-week iteration, so we have more flexibility to work on our tasks. This change was recorded in the project-decisions protocol of 26.10.2022 30.10.22 Issue planning We have started to create tickets for each individual CRUD operation. However, from our point of view, this is not useful, as the operation alone does not contain all the associated tasks. Instead, we want to create tickets on a component basis, which includes all related steps (tests, implementation, documentation, etc.). 05.11.22 Figma We ran into problem because why designed more features in Figma than agreed in the sprint planning. Is the story now finished or not? Is it required or stretch? We decided to only put in Figma what we discussed and use a different board for ideas that pop up. 06.12.22 Sprint Review We had some spillover stories lately and had problems in the review because of that. Do we show it in the next review again? Hard to give feedback like this. Agreed to not show it in the review and just mention that it is a spillover story that will be shown in the next review."},{"location":"project/project-decisions/","title":"Project decisions","text":"<p>This document keeps track of important decisions about this project</p>"},{"location":"project/project-decisions/#list-of-decisions","title":"List of decisions","text":"<ul> <li>Use Kotlin &amp; Spring Boot instead of Go &amp; the PocketBase framework</li> <li>Use Flyway as a database migration tool</li> <li>Use Next.js 12 instead of 13 for now</li> <li>Use Tailwind for styling</li> <li>Work with 2-week sprints</li> <li>Write controllers and accept some boilerplate code instead of using Spring Data<ul> <li>More flexibility by doing that</li> <li>Learn one thing at a time. Too much magic for us now.</li> </ul> </li> <li>Use Spring Security and JWT for Authentication/Authorization</li> <li>Don't cascade delete data.<ul> <li>Keep it and set the foreign key to null</li> </ul> </li> <li>Work with Ids<ul> <li>Don't pass whole objects when they are not needed</li> </ul> </li> <li>A story should be presentable after it's done<ul> <li>Use sub-tasks for the different technical tasks</li> </ul> </li> </ul>"},{"location":"project/project-meetings/","title":"Project Meetings","text":""},{"location":"project/project-meetings/#27092022","title":"27.09.2022","text":""},{"location":"project/project-meetings/#general-meeting","title":"General Meeting","text":""},{"location":"project/project-meetings/#present","title":"present","text":"<ul> <li>Bigler Andy</li> <li>Fuhrer Jan</li> <li>Lauber Jan</li> <li>Mowers Anthony Alexander</li> <li>Other two groups</li> </ul>"},{"location":"project/project-meetings/#protocol","title":"protocol","text":"<ul> <li>Project kickoff</li> <li>Introduction to Github, StoriesOnBoard and Test Driven Development</li> </ul>"},{"location":"project/project-meetings/#11102022","title":"11.10.2022","text":""},{"location":"project/project-meetings/#sprint-review-sprint-planning-of-demo-sprint","title":"Sprint Review / Sprint Planning of Demo Sprint","text":""},{"location":"project/project-meetings/#present_1","title":"present","text":"<ul> <li>Bigler Andy</li> <li>Fuhrer Jan</li> <li>Lauber Jan</li> <li>Mowers Anthony Alexander</li> </ul>"},{"location":"project/project-meetings/#protocol_1","title":"protocol","text":"<ul> <li>Presentation of FizzBuzz implementation (Go, Next.js)</li> <li>Discussed first data-model</li> <li>Planned first real sprint (Rest endpoints for habits and journal entries)</li> </ul>"},{"location":"project/project-meetings/#general-meeting_1","title":"General Meeting","text":""},{"location":"project/project-meetings/#present_2","title":"present","text":"<ul> <li>Bigler Andy</li> <li>Fuhrer Jan</li> <li>Lauber Jan</li> <li>Mowers Anthony Alexander</li> <li>Other two groups</li> </ul>"},{"location":"project/project-meetings/#protocol_2","title":"protocol","text":"<ul> <li>Present what we have done to the other teams</li> <li>Have a look at the other teams progress</li> </ul>"},{"location":"project/project-meetings/#18102022","title":"18.10.2022","text":""},{"location":"project/project-meetings/#sprint-review-sprint-planning","title":"Sprint Review / Sprint Planning","text":""},{"location":"project/project-meetings/#present_3","title":"present","text":"<ul> <li>Fuhrer Jan</li> <li>Mowers Anthony Alexander</li> </ul>"},{"location":"project/project-meetings/#protocol_3","title":"protocol","text":"<ul> <li>Presentation of PocketBase api endpoints</li> <li>Plan next sprint</li> </ul>"},{"location":"project/project-meetings/#20102022","title":"20.10.2022","text":""},{"location":"project/project-meetings/#general-meeting_2","title":"General Meeting","text":""},{"location":"project/project-meetings/#present_4","title":"present","text":"<ul> <li>Bigler Andy</li> <li>Fuhrer Jan</li> <li>Lauber Jan</li> <li>Mowers Anthony Alexander</li> </ul>"},{"location":"project/project-meetings/#protocol_4","title":"protocol","text":"<ul> <li>Use Kotlin instead of Go &amp; the PocketBase framework</li> <li>Rewrite the backend in Kotlin</li> <li>Make a first Figma prototype of the UI</li> </ul>"},{"location":"project/project-meetings/#25102022","title":"25.10.2022","text":""},{"location":"project/project-meetings/#sprint-review-sprint-planning_1","title":"Sprint Review / Sprint Planning","text":""},{"location":"project/project-meetings/#present_5","title":"present","text":"<ul> <li>Bigler Andy</li> <li>Fuhrer Jan</li> <li>Lauber Jan</li> <li>Mowers Anthony Alexander</li> </ul>"},{"location":"project/project-meetings/#protocol_5","title":"protocol","text":"<ul> <li>Continue with all open stories of Sprint 2 by tuesday, 01.11.2022</li> <li>Develop a first UI version</li> <li>After this one-week sprint, we continue with 2-week sprints</li> <li>In the meeting, we all talk about the sprint goal</li> <li>The students made a proposal for the user stories to be worked on</li> <li>Use \"Spring-Data\" in the backend</li> </ul>"},{"location":"project/project-meetings/#01112022","title":"01.11.2022","text":""},{"location":"project/project-meetings/#sprint-review-sprint-planning_2","title":"Sprint Review / Sprint Planning","text":""},{"location":"project/project-meetings/#present_6","title":"present","text":"<ul> <li>Bigler Andy</li> <li>Fuhrer Jan</li> <li>Lauber Jan</li> <li>Mowers Anthony Alexander</li> </ul>"},{"location":"project/project-meetings/#protocol_6","title":"protocol","text":"<ul> <li>Presented V1 and V2 of the prototype</li> <li>Presented first UI components</li> <li>Discussed Spring Data and agreed not to use it</li> <li>Planned sprint (Blocker for presentation and Blockweek)</li> </ul>"},{"location":"project/project-meetings/#03112022","title":"03.11.2022","text":""},{"location":"project/project-meetings/#backlog-refinement","title":"Backlog Refinement","text":""},{"location":"project/project-meetings/#present_7","title":"present","text":"<ul> <li>Bigler Andy</li> <li>Mowers Anthony Alexander</li> </ul>"},{"location":"project/project-meetings/#protocol_7","title":"protocol","text":"<ul> <li>Fine-tuned prototype to exactly match the requirements</li> <li>Had a short look on future features</li> <li>Topic Figma:</li> <li>Don't put more in the prototype than discussed beforehand --&gt; Scope Creep</li> <li>Put it in a different area for the time being.</li> <li>Topic Cascade Delete:</li> <li>Don't use cascade delete for habits/journal entries</li> <li>Use on delete set null</li> <li>(Idea) Work with id's wherever possible. Not with whole objects</li> <li>Topic StorieOnBoard chaos:</li> <li>No sub-tasks/technical stories on this board</li> <li>Use \"Convert to issue\" feature on Github to create sub-tasks</li> </ul>"},{"location":"project/project-meetings/#08112022","title":"08.11.2022","text":""},{"location":"project/project-meetings/#intermediate-presentations","title":"Intermediate Presentations","text":""},{"location":"project/project-meetings/#present_8","title":"present","text":"<ul> <li>Multiple groups</li> </ul>"},{"location":"project/project-meetings/#protocol_8","title":"protocol","text":"<ul> <li>Presented our work and scrum process</li> <li>Watched presentations by other teams</li> </ul>"},{"location":"project/project-meetings/#14112022","title":"14.11.2022","text":""},{"location":"project/project-meetings/#sprint-review-sprint-planning_3","title":"Sprint Review / Sprint Planning","text":""},{"location":"project/project-meetings/#present_9","title":"present","text":"<ul> <li>Bigler Andy</li> <li>Fuhrer Jan</li> <li>Lauber Jan</li> <li>Mowers Anthony Alexander</li> </ul>"},{"location":"project/project-meetings/#protocol_9","title":"protocol","text":"<ul> <li>Short call as we were in the Blockweek</li> <li>Presented UI components for journal entry</li> <li>Presented integration of habit UI components</li> <li>Discussed the next sprint (Frequency feature, input validation and PoC Authentication)</li> </ul>"},{"location":"project/project-meetings/#22112022","title":"22.11.2022","text":""},{"location":"project/project-meetings/#backlog-refinement_1","title":"Backlog Refinement","text":""},{"location":"project/project-meetings/#present_10","title":"present","text":"<ul> <li>Bigler Andy</li> <li>Mowers Anthony Alexander</li> </ul>"},{"location":"project/project-meetings/#protocol_10","title":"protocol","text":"<ul> <li>Discussed a new feature to group habits</li> <li>Current UI --&gt; Improvements in Navigation</li> <li>Discussion Unit tests and Authentication/Authorization</li> <li>Cleaned up Epics and User Stories</li> </ul>"},{"location":"project/project-meetings/#mid-sprint-meeting","title":"Mid Sprint Meeting","text":""},{"location":"project/project-meetings/#present_11","title":"present","text":"<ul> <li>Bigler Andy</li> <li>Fuhrer Jan</li> <li>Lauber Jan</li> <li>Mowers Anthony Alexander</li> </ul>"},{"location":"project/project-meetings/#protocol_11","title":"protocol","text":"<ul> <li>Show progress of Authentication PoC</li> <li>Show progress of frequency feature</li> </ul>"},{"location":"project/project-meetings/#29112022","title":"29.11.2022","text":""},{"location":"project/project-meetings/#sprint-review-sprint-planning_4","title":"Sprint Review / Sprint Planning","text":""},{"location":"project/project-meetings/#present_12","title":"present","text":"<ul> <li>Bigler Andy</li> <li>Fuhrer Jan</li> <li>Lauber Jan</li> <li>Mowers Anthony Alexander</li> </ul>"},{"location":"project/project-meetings/#protocol_12","title":"protocol","text":"<ul> <li>Show better input validation, standalone log entry creation</li> <li>Show working Authentication</li> <li>Plan next sprint (Documentation update, navigation, re-enable unit tests, open api documentation)</li> </ul>"},{"location":"project/project-meetings/#06122022","title":"06.12.2022","text":""},{"location":"project/project-meetings/#mid-sprint-meeting_1","title":"Mid Sprint Meeting","text":""},{"location":"project/project-meetings/#present_13","title":"present","text":"<ul> <li>Bigler Andy</li> <li>Fuhrer Jan</li> <li>Lauber Jan</li> <li>Mowers Anthony Alexander</li> </ul>"},{"location":"project/project-meetings/#protocol_13","title":"protocol","text":"<ul> <li>Show progress of sprint</li> </ul>"},{"location":"project/project-meetings/#13122022","title":"13.12.2022","text":""},{"location":"project/project-meetings/#sprint-review-sprint-planning_5","title":"Sprint Review / Sprint Planning","text":""},{"location":"project/project-meetings/#present_14","title":"present","text":"<ul> <li>Bigler Andy</li> <li>Fuhrer Jan</li> <li>Lauber Jan</li> <li>Mowers Anthony Alexander</li> </ul>"},{"location":"project/project-meetings/#protocol_14","title":"protocol","text":"<ul> <li>Show group habits feature, navigation improvements, open api documentation</li> <li>Finalisation of the whole Auth topic with all Unit tests green again</li> <li>Plan next sprint (Score for habit, documentation, small fixes)</li> </ul>"},{"location":"project/project-meetings/#20122022","title":"20.12.2022","text":""},{"location":"project/project-meetings/#mid-sprint-meeting_2","title":"Mid Sprint Meeting","text":""},{"location":"project/project-meetings/#present_15","title":"present","text":"<ul> <li>Bigler Andy</li> <li>Fuhrer Jan</li> <li>Lauber Jan</li> <li>Mowers Anthony Alexander</li> </ul>"},{"location":"project/project-meetings/#protocol_15","title":"protocol","text":"<ul> <li>Show progress of sprint</li> <li>Agreed to finish on technical tasks and focus on documentation and presentation</li> </ul>"},{"location":"project/project-meetings/#10012023","title":"10.01.2023","text":""},{"location":"project/project-meetings/#sprint-review-sprint-planning_6","title":"Sprint Review / Sprint Planning","text":""},{"location":"project/project-meetings/#present_16","title":"present","text":"<ul> <li>Bigler Andy</li> <li>Fuhrer Jan</li> <li>Lauber Jan</li> <li>Mowers Anthony Alexander</li> </ul>"},{"location":"project/project-meetings/#protocol_16","title":"protocol","text":"<ul> <li>Showed bug fixes, new documentation, lean canvas and habit score</li> <li>Discussed everything to be done before and for the final presentation</li> <li>Planned last stories to complete the project</li> </ul>"},{"location":"project/project-meetings/#17012023","title":"17.01.2023","text":""},{"location":"project/project-meetings/#final-presentation","title":"Final presentation","text":""},{"location":"project/project-meetings/#present_17","title":"present","text":"<ul> <li>Multiple groups</li> </ul>"},{"location":"project/project-meetings/#protocol_17","title":"protocol","text":"<ul> <li>Presented our finished product and scrum process</li> <li>Watched presentations by other teams</li> </ul>"},{"location":"project/project-meetings/#team-internal","title":"Team Internal","text":""},{"location":"project/project-meetings/#retro","title":"Retro","text":""},{"location":"project/project-meetings/#11102022_1","title":"11.10.2022","text":""},{"location":"project/project-meetings/#retro_1","title":"Retro","text":"<ul> <li>Assign ScM role and define Scrum process</li> </ul>"},{"location":"project/project-meetings/#20102022_1","title":"20.10.2022","text":""},{"location":"project/project-meetings/#retro_2","title":"Retro","text":"<ul> <li>Deal with technology change challenges. See how we can achieve it in the team.</li> <li>Quite some stress because of civil service, sickness and working abroad</li> </ul>"},{"location":"project/project-meetings/#25102022_1","title":"25.10.2022","text":""},{"location":"project/project-meetings/#retro_3","title":"Retro","text":"<ul> <li>Slowly things are getting clearer</li> <li>We need a PO in our team to make live easier</li> </ul>"},{"location":"project/project-meetings/#01112022_1","title":"01.11.2022","text":""},{"location":"project/project-meetings/#retro_4","title":"Retro","text":"<ul> <li>Good work with Figma and UI foundation</li> <li>Focus on presentation</li> </ul>"},{"location":"project/project-meetings/#15112022","title":"15.11.2022","text":""},{"location":"project/project-meetings/#retro_5","title":"Retro","text":"<ul> <li>Quick round as we were in the Blockweek</li> <li>Finally, stable application that works and that we can use as a foundation</li> <li>Need to make sure we have enough tasks defined to work on now</li> </ul>"},{"location":"project/project-meetings/#29112022_1","title":"29.11.2022","text":""},{"location":"project/project-meetings/#retro_6","title":"Retro","text":"<ul> <li>Struggling with the authentication topic</li> <li>Mostly Blockweek in this Sprint</li> </ul>"},{"location":"project/project-meetings/#13122022_1","title":"13.12.2022","text":""},{"location":"project/project-meetings/#retro_7","title":"Retro","text":"<ul> <li>Was probably not a good idea to not build Auth from the start</li> <li>Disabling unit tests was also not a good idea</li> <li>After clean up finally back in green everything</li> </ul>"},{"location":"project/project-meetings/#10012023_1","title":"10.01.2023","text":""},{"location":"project/project-meetings/#retro_8","title":"Retro","text":"<ul> <li>Good team work in this sprint</li> <li>We could finish almost all the tasks</li> <li>Should not have planed more technical features as we had to focus on documentation and presentation</li> </ul>"},{"location":"project/project-meetings/#daily","title":"\"Daily\"","text":""},{"location":"project/project-meetings/#29092022","title":"29.09.2022","text":"<ul> <li>How to do FizzBuzz with Go, PocketBase &amp; Nest.js</li> </ul>"},{"location":"project/project-meetings/#04102022","title":"04.10.2022","text":"<ul> <li>Pair together on Docker setup and documentation</li> </ul>"},{"location":"project/project-meetings/#08102022","title":"08.10.2022","text":"<ul> <li>Help for logging in Go</li> </ul>"},{"location":"project/project-meetings/#14102022","title":"14.10.2022","text":"<ul> <li>Help for PocketBase setup</li> </ul>"},{"location":"project/project-meetings/#21102022","title":"21.10.2022","text":"<ul> <li>Distribute work for backend rewrite</li> </ul>"},{"location":"project/project-meetings/#23102022","title":"23.10.2022","text":"<ul> <li>Pair on Figma prototype</li> <li>Improve Scrum process</li> </ul>"},{"location":"project/project-meetings/#27102022","title":"27.10.2022","text":"<ul> <li>Pair on Spring Data exploration</li> <li>Help for first UI components</li> </ul>"},{"location":"project/project-meetings/#30102022","title":"30.10.2022","text":"<ul> <li>Share progress of UI and Figma</li> </ul>"},{"location":"project/project-meetings/#04112022","title":"04.11.2022","text":"<ul> <li>Inform team after Backlog Refinement</li> <li>Assign tasks for presentation</li> <li>Discuss how to make UI ready for presentation</li> </ul>"},{"location":"project/project-meetings/#07112022","title":"07.11.2022","text":"<ul> <li>Go through presentation</li> <li>Feedback on slides and Scrum document</li> </ul>"},{"location":"project/project-meetings/#12112022","title":"12.11.2022","text":"<ul> <li>Sync on prototype</li> <li>Pair on integration of journal entry component</li> </ul>"},{"location":"project/project-meetings/#19112022","title":"19.11.2022","text":"<ul> <li>Longer break because of Blockweek</li> <li>Discuss bugs regarding frontend input validation</li> </ul>"},{"location":"project/project-meetings/#24112022","title":"24.11.2022","text":"<ul> <li>Present PoC for Authentication</li> </ul>"},{"location":"project/project-meetings/#27112022","title":"27.11.2022","text":"<ul> <li>Present integration of standalone journal entry</li> </ul>"},{"location":"project/project-meetings/#30112022","title":"30.11.2022","text":"<ul> <li>Distribute work in the team</li> </ul>"},{"location":"project/project-meetings/#03122022","title":"03.12.2022","text":"<ul> <li>Pairing on new backend features</li> </ul>"},{"location":"project/project-meetings/#07122022","title":"07.12.2022","text":"<ul> <li>Show progress on UI</li> </ul>"},{"location":"project/project-meetings/#10122022","title":"10.12.2022","text":"<ul> <li>Pair programming to refactor backend</li> <li>Work together on auth</li> </ul>"},{"location":"project/project-meetings/#15122022","title":"15.12.2022","text":"<ul> <li>Split work</li> <li>Discussed hot to implement small fixes</li> </ul>"},{"location":"project/project-meetings/#21122022","title":"21.12.2022","text":"<ul> <li>Last discussion in this year</li> <li>What did we do and what is still open for the next year</li> <li>Prepare everything to complete the project</li> </ul>"},{"location":"project/project-meetings/#06012023","title":"06.01.2023","text":"<ul> <li>Short sync of what was done during the holidays</li> <li>Discuss what we want need to do in the next sprint</li> </ul>"},{"location":"project/project-meetings/#12012023","title":"12.01.2023","text":"<ul> <li>Split work and reserve time for the presentation</li> </ul>"},{"location":"project/project-meetings/#14012023","title":"14.01.2023","text":"<ul> <li>Co-working day to finish the project</li> </ul>"},{"location":"project/project-meetings/#17012023_1","title":"17.01.2023","text":"<ul> <li>Last preparations for presentation</li> </ul>"},{"location":"project/project-setup/","title":"Project Setup","text":"<p>In this project the framework scrum is applied. This document contains the way Scrum is implemented for this project.</p>"},{"location":"project/project-setup/#events","title":"Events","text":"<p>Based on the way the project is handled in this module, only all meaningful Scrum ceremonies are held. This includes the following:</p>"},{"location":"project/project-setup/#sprint-planning","title":"Sprint Planning","text":"<ul> <li>Attendees: Scrum Team, Project Coach</li> <li>Goal: Initiates the Sprint by laying out the work to be performed for the Sprint.</li> <li>When: Every two weeks</li> <li>Procedure: Together with the PO, who represents the customers interests, a Sprint goal is defined. For this purpose, tickets are moved from the Product Backlog to the current sprint.</li> <li>Outcome: Sprint Backlog</li> </ul>"},{"location":"project/project-setup/#sprint-review","title":"Sprint Review","text":"<ul> <li>Attendees: Scrum Team, Project Coach</li> <li>Goal: Inspect the outcome of the Sprint and determine future adaptations. The Scrum Team presents the results of their work to key stakeholders and progress toward the Product Goal is discussed.</li> <li>When: Every two weeks</li> <li>Procedure: The Scrum Team and stakeholders review what was accomplished in the Sprint and what has changed in their environment.</li> </ul>"},{"location":"project/project-setup/#sprint-retrospective","title":"Sprint Retrospective","text":"<ul> <li>Attendees: Scrum Team</li> <li>Goal: Plan ways to increase quality and effectiveness.</li> <li>When: Every two weeks</li> <li>Procedure: The Scrum Team inspects how the last Sprint went in regard to individuals, interactions, processes, tools, and their Definition of Done. Discusses what went well during the Sprint, what problems it encountered, and how those problems were (or were not) solved.</li> </ul>"},{"location":"project/project-setup/#daily-scrum","title":"\"Daily\" Scrum","text":"<ul> <li>Attendees: Scrum Team</li> <li>Goal: Discuss stories that are being worked on. Help each other out when needed.</li> <li>When: When need arises. Around two times per week.</li> <li>Procedure: Each team member shortly explains on what they were and are working on. Asking for help and pairing up. General infos from PO / ScM at the end.</li> </ul>"},{"location":"project/project-setup/#bi-weekly","title":"Bi-Weekly","text":"<ul> <li>Attendees: Scrum Team, Project Coach</li> <li>When: Every two weeks (Shifted one week)</li> <li>Goal: Discuss the progress of the running Sprint.</li> <li>Procedure: Show the Project Coach what is being worked on and clarify questions if they arise.</li> </ul>"},{"location":"project/project-setup/#backlog-refinement","title":"Backlog Refinement","text":"<ul> <li>Attendees: PO, Project Coach/Customer</li> <li>When: When the Backlog needs to be refined</li> <li>Goal: Discuss future Epics and User Steps. Prioritise the work.</li> <li>Procedure: Extend and add more cards on StoriesOnBoard in accordance to the Customers wishes.</li> <li>Outcome: Epics/User Steps that are Backlog Ready and can be planned in a sprint.</li> </ul>"},{"location":"project/project-setup/#team-roles","title":"Team &amp; Roles","text":"Role Project Member(s) Product Owner (PO) Bigler Andy Scrum Master Fuhrer Jan Developers Bigler Andy, Fuhrer Jan, Lauber Jan Customer/ Project Coach Mowers Anthony Alexander"},{"location":"project/project-setup/#artefacts","title":"Artefacts","text":""},{"location":"project/project-setup/#product-backlog","title":"Product Backlog","text":"<p>The Product Backlog is an emergent, ordered list of what is needed to improve the product. It is the single source of work undertaken by the Scrum Team.</p>"},{"location":"project/project-setup/#sprint-backlog","title":"Sprint Backlog","text":"<p>The Sprint Backlog is composed of the Sprint Goal (why), the set of Product Backlog items selected for the Sprint (what), as well as an actionable plan for delivering the Increment (how).</p>"},{"location":"project/project-setup/#impediment-backlog","title":"Impediment Backlog","text":"<p>The impediment backlog is kept in the following document: Impediment Backlog</p>"},{"location":"project/project-vision/","title":"Vision","text":"<p>Our vision for our habit tracking app is to empower users to achieve their goals and improve their lives through consistent, intentional action. We believe in the power of customization and have designed our app to be highly customizable and tailored to individual needs. Our app will be reliable, responsive, and secure, utilizing the latest technologies to ensure a seamless user experience. In addition to tracking existing habits, we also focus on helping users develop new, positive habits that will improve their lives. We understand that building new habits can be challenging, which is why we have included features such as customizable reminders, progress tracking, and goal setting to help users stay on track and motivated. We are committed to continuous improvement through open-source collaboration and user feedback and believe that by focusing on the development of healthy habits, our users will be able to make lasting, positive changes in their lives and reach their full potential.</p>"},{"location":"project/project-vision/#atomic-habits","title":"Atomic Habits","text":"<p>Our app is loosely based on the book Atomic Habits by James Clear. The book outlines the importance of building good habits and breaking bad habits, and provides a framework for doing so.</p> <ul> <li>The 1st law (Cue): Make it obvious. --&gt; Dashboard</li> <li>The 2nd law (Craving): Make it attractive. --&gt; Gamification (visibility of progress)</li> <li>The 3rd law (Response): Make it easy. --&gt; Interface as simple as possible, the least amount of clicks to log a habit</li> <li>The 4th law (Reward): Make it satisfying. --&gt; The whole idea of Habit tracking itself</li> </ul> <p></p>"}]}